name: sprint pre-merge check

on: 
  push:
    branches:
    - features/sprint*
  pull_request:
    branches:
    - features/sprint*

env:
  CMAKE_VERSION: 3.15.5

jobs:
  cmake-win:
    name: cmake build-win
    runs-on: windows-2019
    strategy:
      matrix:
        generator: ['Visual Studio 16 2019', 'MSYS Makefiles']
        shared: [on]

    steps:
    - uses: actions/checkout@v1
    - name: cmake_version
      run: cmake --version
    - name: cmake_generage
      run: cmake -S . -B build -G "${{ matrix.generator }}" -DENABLE_SHARED=${{ matrix.shared }} -DENABLE_TESTS=on
    - name: cmake_build
      run: cmake --build build --config Release --parallel 4
    - name: ctest
      run: |
        cd build
        ctest -C Release --output-on-failure

  cmake-mac:
    name: cmake build-mac
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-10.15]
        # os: [macos-10.15, macos-11.0]

    steps:
    - uses: actions/checkout@v2
    - name: cmake_version
      run: cmake --version
    - name: cmake_generage-macos
      run: cmake -S . -B build -G "Unix Makefiles" -DENABLE_SHARED=on
    - name: cmake_build
      run: cmake --build build --config Release --parallel 4
    - name: ctest
      run: |
        cd build
        ctest -C Release --output-on-failure

  cmake-ubuntu-coverage:
    name: cmake build-ubuntu
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04]
        shared: [on]
        elements: [on, off]

    steps:
    - uses: actions/checkout@v2
    - name: dump version
      run: |
        cmake --version
        gcc --version
    - name: ubuntu-apt-install
      if: matrix.elements == 'on'
      run: |
        cat /etc/os-release
        sudo apt install lcov
    - name: cmake-build
      run: |
        cmake --version
        cmake -S . -B build -G "Unix Makefiles" -DENABLE_SHARED=${{ matrix.shared }} -DENABLE_ELEMENTS=${{ matrix.elements }} -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE=${{ matrix.elements }} -DTARGET_RPATH=./build/Debug
        cmake --build build --config Debug --parallel 4
    - name: lint_check
      run: ./tools/lint_quiet.sh
    - name: test
      run: |
        cd build
        ctest -C Debug --output-on-failure
        cd ..
    - name: collect coverage
      if: matrix.elements == 'on'
      run: |
        cd build
        make lcov_cfdcore
        zip -r lcov_cfdcore_output.zip lcov_cfdcore_output
        cd ..
    - name: upload coverage
      if: matrix.elements == 'on'
      uses: actions/upload-artifact@v1
      with:
        name: output-lcov-cfdcore-${{ matrix.os }}
        path: ./build/lcov_cfdcore_output.zip

  ubuntu-valgrind:
    name: valgrind-ubuntu
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
        shared: [on]

    steps:
    - uses: actions/checkout@v2
    - name: dump version
      run: |
        cmake --version
        gcc --version
    - name: ubuntu-apt-install
      run: |
        cat /etc/os-release
        sudo apt-get update
        sudo apt-get install -y valgrind
    - name: cmake-build
      run: |
        cmake --version
        cmake -S . -B build -G "Unix Makefiles" -DENABLE_SHARED=${{ matrix.shared }} -DCMAKE_BUILD_TYPE=Debug -DTARGET_RPATH=./build/Debug
        cmake --build build --config Debug --parallel 4
    - name: valgrind
      run: |
         # --valgrind-stacksize=1048576 --num-callers=12
         valgrind -v --tool=memcheck --leak-check=full --valgrind-stacksize=10485760 --log-file=./valgrind.log --time-stamp=yes ./build/Debug/cfdcore_test
    - name: upload coverage
      uses: actions/upload-artifact@v1
      with:
        name: valgrind-log
        path: ./valgrind.log

  doxygen-ubuntu:
    name: doxygen-check
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
    - name: install_doxygen
      run: sudo apt install doxygen graphviz
    - name: doxygen_check
      run: |
        cd doc
        doxygen Doxyfile_quiet_all
